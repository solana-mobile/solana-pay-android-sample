/*
 * Copyright (c) 2022 Solana Mobile Inc.
 */

plugins {
    id 'com.android.library'
    id 'com.google.protobuf' version "0.8.19"
}

android {
    compileSdk 31

    defaultConfig {
        minSdk 23
        targetSdk 31

        consumerProguardFiles "consumer-rules.pro"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    sourceSets {
        test {
            proto {
                srcDir 'external/digitalassetlinks/compatibility-tests/v1'
            }
        }
    }
}

protobuf {
    protoc {
        def archSuffix = ''
        if (osdetector.os == "osx") {
            // Workaround: there are no published protoc binaries for Apple Silicon-based macs.
            // Apply a manual architecture to the artifact to select the osx-x86_64 variant, which
            // runs fine with Rosetta.
            archSuffix = ':osx-x86_64'
        }
        artifact = "com.google.protobuf:protoc:3.21.2$archSuffix"   // Download from repositories
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java { }
            }
        }
    }
}

// Define JavaDoc build task for all variants
android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompileProvider.get().source
        classpath = project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += files(variant.javaCompileProvider.get().classpath)
        options.links("https://docs.oracle.com/javase/8/docs/api/");
        options.links("https://d.android.com/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

// Build JavaDoc when making a release build
tasks.whenTaskAdded { task ->
    if (task.name == 'assembleRelease') {
        task.dependsOn("generateReleaseJavadoc")
    }
}

dependencies {
    compileOnly 'androidx.annotation:annotation:1.4.0'
    testImplementation 'com.google.protobuf:protobuf-java:3.21.2'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-inline:4.6.1'
    testImplementation 'org.robolectric:robolectric:4.8.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'junit:junit:4.13.2'
}